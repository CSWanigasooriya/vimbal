/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface VimbalInterface extends ethers.utils.Interface {
  functions: {
    'fileCount()': FunctionFragment;
    'files(uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'tipFileOwner(uint256)': FunctionFragment;
    'uploadFile(string,string,string,string,string)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'fileCount', values?: undefined): string;
  encodeFunctionData(functionFragment: 'files', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'tipFileOwner',
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'uploadFile',
    values: [string, string, string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: 'fileCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'files', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'tipFileOwner',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'uploadFile', data: BytesLike): Result;

  events: {
    'FileCreated(uint256,string,string,string,string,string,uint256,address)': EventFragment;
    'FileTipped(uint256,string,string,string,string,string,uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'FileCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FileTipped'): EventFragment;
}

export class Vimbal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VimbalInterface;

  functions: {
    fileCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    files(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, string, string, BigNumber, string] & {
        id: BigNumber;
        hash: string;
        title: string;
        authors: string;
        keywords: string;
        description: string;
        tipAmount: BigNumber;
        owner: string;
      }
    >;

    name(overrides?: CallOverrides): Promise<[string]>;

    tipFileOwner(
      _id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uploadFile(
      _fileHash: string,
      _title: string,
      _authors: string,
      _keywords: string,
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  fileCount(overrides?: CallOverrides): Promise<BigNumber>;

  files(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, string, string, BigNumber, string] & {
      id: BigNumber;
      hash: string;
      title: string;
      authors: string;
      keywords: string;
      description: string;
      tipAmount: BigNumber;
      owner: string;
    }
  >;

  name(overrides?: CallOverrides): Promise<string>;

  tipFileOwner(
    _id: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uploadFile(
    _fileHash: string,
    _title: string,
    _authors: string,
    _keywords: string,
    _description: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    fileCount(overrides?: CallOverrides): Promise<BigNumber>;

    files(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, string, string, BigNumber, string] & {
        id: BigNumber;
        hash: string;
        title: string;
        authors: string;
        keywords: string;
        description: string;
        tipAmount: BigNumber;
        owner: string;
      }
    >;

    name(overrides?: CallOverrides): Promise<string>;

    tipFileOwner(_id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    uploadFile(
      _fileHash: string,
      _title: string,
      _authors: string,
      _keywords: string,
      _description: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    FileCreated(
      id?: null,
      hash?: null,
      title?: null,
      authors?: null,
      keywords?: null,
      description?: null,
      tipAmount?: null,
      owner?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, string, string, BigNumber, string],
      {
        id: BigNumber;
        hash: string;
        title: string;
        authors: string;
        keywords: string;
        description: string;
        tipAmount: BigNumber;
        owner: string;
      }
    >;

    FileTipped(
      id?: null,
      hash?: null,
      title?: null,
      authors?: null,
      keywords?: null,
      description?: null,
      tipAmount?: null,
      owner?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, string, string, BigNumber, string],
      {
        id: BigNumber;
        hash: string;
        title: string;
        authors: string;
        keywords: string;
        description: string;
        tipAmount: BigNumber;
        owner: string;
      }
    >;
  };

  estimateGas: {
    fileCount(overrides?: CallOverrides): Promise<BigNumber>;

    files(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    tipFileOwner(
      _id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uploadFile(
      _fileHash: string,
      _title: string,
      _authors: string,
      _keywords: string,
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    fileCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    files(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tipFileOwner(
      _id: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uploadFile(
      _fileHash: string,
      _title: string,
      _authors: string,
      _keywords: string,
      _description: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
